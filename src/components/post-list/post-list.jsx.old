"use client";
import { AnimatePresence, useInView } from "framer-motion";
import {
  useEffect,
  useRef,
  experimental_useOptimistic as useOptimistic,
} from "react";
import { Post } from "./post/post";
import { usePostsContext } from "@/hooks/posts-context";
import { Loading } from "@/components/ui/loading";

export function PostList() {
  const {
    posts,
    isFetching,
    isFetchingNextPage,
    isFetchingNewInsertedPost,
    fetchNextPage,
    hasNextPage,
  } = usePostsContext();

  const ref = useRef(null);
  const inView = useInView(ref);

  useEffect(() => {
    if (inView) fetchNextPage();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [inView]);

  const renderedContent = posts.map((post, i) => {
    // Check if the next post is a reply to this post

    return (
      <Post
        key={post.id}
        post={post}
        hasReplies={post.hasReplies}
        isReply={post.reply_of_id}
        isRepost={post.repost_of_id}
        sourcePost={post.source_post}
        hasParent={post.hasParent}
        hasChildren={post.hasChildren}
        // hasReplies={isHasReplies}
        // centerReplyChain={post.isCenterReplyChain}
      />
    );
  });

  // console.log("POSTLIST:::::", posts);

  return (
    <>
      {isFetchingNewInsertedPost && <Loading />}
      <AnimatePresence mode="popLayout">{renderedContent}</AnimatePresence>

      {isFetching && !isFetchingNextPage ? (
        <Loading />
      ) : (
        <div className="w-full flex items-center justify-center pt-5">
          <button
            onClick={() => fetchNextPage()}
            disabled={!hasNextPage || isFetchingNextPage}
          >
            {/* LOAD MORE */}
            {isFetchingNextPage ? (
              <Loading />
            ) : hasNextPage ? (
              <Loading />
            ) : (
              "Nothing more to load"
            )}
          </button>
        </div>
      )}
      <div ref={ref} className="h-40"></div>
    </>
  );
}
